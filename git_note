git rebase -i

git add -A
git clean -df
git init --bare
git commit --amend --no-edit # 登録されたインデックスを直前のコミットにまとめる
git reset --soft HEAD^  # 直前のコミットを取り消したい（コミットのみ取り消し）. つもりワークディレクトリの内容はそのままでコミットだけを取り消す。HEAD^：直前のコミットを意味する。

「git reset --hard」 → コミット取り消した上でワークディレクトリの内容も書き換える。

g checkout HEAD~1 config/database.yml

git commit --amend --author="Bo Wen <b-wen@>"

git branch -D feature/2629 マージしたかどうかを問わずに削除する
git push --delete origin foo または git push origin :foo リモートブランチを削除する

切到源码的根目录下，
 git config core.fileMode false
这样你的所有的git库都会忽略filemode变更了


Your branch and 'origin/foobar' have diverged,
and have 5 and 1 different commit each, respectively.
$ git fetch origin
$ git reset --hard origin/foobar

git branch -m <古いブランチ名> <新しいブランチ名>
今開いているブランチをリネームする場合は、単純に新しいブランチ名を指定するだけです。
git branch -m <新しいブランチ名>

git diff HEAD^^^ --name-only | xargs bundle exec rubocop
git diff HEAD^^^ --name-only | pbcopy
git diff HEAD^^^ --name-only | grep ".rb" | paste -s - | pbcopy
git diff HEAD^^^ --name-only | grep ".rb" | grep -v "schema" | paste -s -
git diff HEAD^^^ --name-only | grep -e ".rb$" | grep -e "^app/" -e "^lib/" | paste -s - | pbcopy

# it will list all the updated files
git diff --name-status HEAD^^ HEAD^^^ | grep controller
